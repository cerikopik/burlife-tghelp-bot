import os
import re
import asyncio
from telegram import Bot, ReactionTypeEmoji, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.helpers import escape_markdown
from telegram.ext import Application, MessageHandler, CommandHandler, filters, CallbackQueryHandler

# --- –°–ï–ö–†–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –ë–ï–†–£–¢–°–Ø –ò–ó –û–ö–†–£–ñ–ï–ù–ò–Ø ---
BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_CHAT_ID = os.getenv('GROUP_CHAT_ID')

if not BOT_TOKEN or not GROUP_CHAT_ID:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –∏–ª–∏ GROUP_CHAT_ID!")

GROUP_CHAT_ID = int(GROUP_CHAT_ID)
# --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –° –î–ê–ù–ù–´–ú–ò ---


async def start(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start."""
    user_name = update.message.from_user.first_name
    welcome_text = (
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π —Å–∞–π—Ç–∞. "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥ (4 —Å–∏–º–≤–æ–ª–∞) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
    )
    await update.message.reply_text(welcome_text)


async def forwarder(update, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–æ–¥ –∏–ª–∏ —Ñ–æ—Ç–æ) –∏, –µ—Å–ª–∏ –æ–Ω–æ –≤–µ—Ä–Ω–æ–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ."""
    user = update.message.from_user
    message = update.message

    is_valid = False
    if message.photo:
        is_valid = True
    elif message.text:
        if len(message.text) == 4 and message.text.isascii() and message.text.isalnum():
            is_valid = True

    if is_valid:
        first_name = escape_markdown(user.first_name, version=2)
        last_name = escape_markdown(user.last_name or '', version=2)
        user_id = user.id
        username = escape_markdown(user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω', version=2)
        
        user_info = (
            f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"üë§ –ò–º—è: {first_name} {last_name}\n"
            f"üÜî ID: `{user_id}`\n"
            f"üîó –Æ–∑–µ—Ä–Ω–µ–π–º: @{username}"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–≤–µ—Ç–∏—Ç—å —à–∞–±–ª–æ–Ω–æ–º", callback_data=f"reply_to_{user_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_to_{user_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=user_info,
            parse_mode='MarkdownV2',
            reply_markup=reply_markup
        )
        
        await context.bot.forward_message(
            chat_id=GROUP_CHAT_ID,
            from_chat_id=message.chat_id,
            message_id=message.message_id
        )
        
        await message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")
    
    else:
        error_message = "‚ùóÔ∏è **–û—à–∏–±–∫–∞.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, —Å–æ—Å—Ç–æ—è—â–∏–π —Ä–æ–≤–Ω–æ –∏–∑ 4 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã), –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
        await message.reply_text(error_message, parse_mode='Markdown')


async def button_handler(update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = int(data.split("_")[2])
    
    try:
        if data.startswith("reply_to_"):
            preset_message = "üìß–í–∞—à–∞ [–ü–†–ò–ì–õ–ê–°–ò–¢–ï–õ–¨–ù–ê–Ø –°–°–´–õ–ö–ê](https://t\\.me/\\+k2dfZY9KPAowNjM6) –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª\\. –ü–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ üëå"
            await context.bot.send_message(
                chat_id=user_id,
                text=preset_message,
                parse_mode='MarkdownV2'
            )
            await query.message.set_reaction(reaction=ReactionTypeEmoji("üëç"))

        elif data.startswith("decline_to_"):
            preset_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await context.bot.send_message(
                chat_id=user_id,
                text=preset_message
            )
            await query.message.set_reaction(reaction=ReactionTypeEmoji("üëé"))
        
        await query.edit_message_reply_markup(reply_markup=None)

    except Exception as e:
        await query.edit_message_reply_markup(reply_markup=None)
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –û—à–∏–±–∫–∞: {e}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏."""
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # ‚≠ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –æ–¥–Ω—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    user_message_filters = (filters.PHOTO | (filters.TEXT & ~filters.COMMAND)) & (~filters.Chat(chat_id=GROUP_CHAT_ID))
    application.add_handler(MessageHandler(user_message_filters, forwarder))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()
